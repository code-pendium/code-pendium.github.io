(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0d0272"],{6783:function(n,e,t){"use strict";t.r(e);var a=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("Level",n._b({},"Level",n.properties,!1))},d=[],u=t("28fe"),i=t("61b2"),b=t.n(i),s="C-01",o="Operators",r=["Fundamentals"],p=2,l="<p>\nIn this problem, you will be making a simple function that adds two variables. We can achieve this by using <b>operators</b>. \nThe 4 most basic operators are addition<kbd>+</kbd>, subtraction<kbd>-</kbd>, multiplication<kbd>*</kbd>, and division<kbd>/</kbd>. \nThere is also the assigment operator <kbd>=</kbd> which we can use to assign values to a variable. \nCombining all these, we can create a <b>statement</b>.\n</p>\n<p>\nExample:\n</p>\n<p>\n<kbd>var a = 1\n var b = 2\n var c = a + b</kbd>\n</p>\n<p>\nThe variable <kbd>c</kbd> here becomes <kbd>3</kbd>\n</p>",k="<p>\nThe input function <kbd>add()</kbd> takes 2 arguments: <kbd>a</kbd> and <kbd>b</kbd>. \nThe arguments are both numbers. \n</p>\n<p>\nExample Input: <kbd>add(1, 2)</kbd>\n</p>",c="<p>\nThe output of the function must be a number.\n</p>\n<p>\nExample Output: <kbd>3</kbd>\n</p>",h="<p>\nYou only need to assign a value to <kbd>result</kbd>. \nThe value should be the result of adding the arguments <kbd>a</kbd> and <kbd>b</kbd>.\n</p>",m="function add(a, b) {\n  // Edit the line below\n  var result\n  return result\n}",f="add(1, 2)",v=[null,null,null,null],w="add",g=function(n,e){var t=n+e;return t},T={components:{Level:u["a"]},data:function(){return{properties:{name:s,title:o,tags:r,difficulty:p,description:l,inputFormat:k,outputFormat:c,hint:h,defaultCode:m,defaultInput:f,testInputs:v,inputFunction:w,solution:g}}},mounted:function(){for(var n in this.properties.testInputs)this.properties.testInputs[n]=[b.a.int(0,100),b.a.int(0,100)]}},I=T,E=t("2877"),x=Object(E["a"])(I,a,d,!1,null,null,null);e["default"]=x.exports}}]);
//# sourceMappingURL=chunk-2d0d0272.6225f9a2.js.map