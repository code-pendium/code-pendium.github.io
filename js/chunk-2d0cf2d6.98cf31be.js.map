{"version":3,"sources":["webpack:///./src/views/levels/c_02.vue?7ff6","webpack:///src/views/levels/c_02.vue","webpack:///./src/views/levels/c_02.vue?abe3","webpack:///./src/views/levels/c_02.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","_b","properties","staticRenderFns","title","tags","difficulty","description","inputFormat","outputFormat","hint","defaultCode","defaultInput","testInputs","inputFunction","solution","components","Level","data","mounted","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,QAAQJ,EAAIM,GAAG,GAAG,QAAQN,EAAIO,YAAW,KACxIC,EAAkB,G,iCCQtB,SACAC,EAAQ,aACRC,EAAO,CAAC,gBACRC,EAAa,EAEbC,EAAc,kjCAsBdC,EAAc,4KAQdC,EAAA,kKAQAC,EAAO,uQASPC,EAAc,uNAadC,EAAe,iBAGfC,EAAa,CAAC,CAAC,SAAU,CAAC,UAAW,MAErCC,EAAgB,QAEhBC,EAAW,SAAX,GACE,MAAF,WACW,OACX,aACW,UAQX,GACEC,WAAY,CACVC,MAAJ,QAGEC,KAAM,WAAR,OACA,YACA,OACA,QACA,OACA,aAEA,cACA,cACA,eACA,OAEA,cACA,eAEA,aACA,gBACA,cAIEC,QA1BF,WA2BIvB,KAAKM,WAAWW,WAAW,GAAK,CAAC,EAArC,mBCxH2Z,I,YCOvZO,EAAY,eACd,EACA1B,EACAS,GACA,EACA,KACA,KACA,MAIa,aAAAiB,E","file":"js/chunk-2d0cf2d6.98cf31be.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Level',_vm._b({},'Level',_vm.properties,false))}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <Level\r\n  v-bind=\"properties\"\r\n  ></Level>\r\n</template>\r\n\r\n<script>\r\nimport Level from \"@/components/Level\"\r\n\r\nconst name = \"C-02\",\r\ntitle = \"Conditions\",\r\ntags = [\"Fundamentals\"],\r\ndifficulty = 2,\r\n\r\ndescription = \r\n`<p>\r\nConditions are a core part of every programming language. \r\nConditional statements are used to perform different actions depending on different conditions. \r\nIn this problem, we will be using <kbd>if</kbd>, <kbd>else</kbd>, and <kbd>else if</kbd> statements. \r\n</p>\r\n<ul>\r\n<li><kbd>if</kbd> is used to specify a block of code to be executed, if the specified condition is true.</li>\r\n<li><kbd>else</kbd> is used  to specify a block of code to be executed, if the first condition is false.</li>\r\n<li><kbd>else if</kbd> is used to specify a new condition to test, if the first condition is false.</li>\r\n</ul>\r\n<br>\r\n<p>\r\nIn this problem, you will be making a function that returns something based on the given input <kbd>food</kbd>. \r\nThe conditions to be followed are:\r\n</p>\r\n<ul>\r\n<li>If <kbd>food</kbd> is <kbd>Apple</kbd>, it should return <kbd>Pie!</kbd>.</li> \r\n<li>If <kbd>food</kbd> is <kbd>Orange</kbd>, it should return <kbd>Juice!</kbd>.</li>\r\n<li>If it is neither of those, it should simply return <kbd>false</kbd> (as a boolean, not a string).</li>\r\n</ul>`,\r\n\r\ninputFormat = \r\n`<p>\r\nThe input function <kbd>match()</kbd> takes only 1 arguments: <kbd>food</kbd>. This argument is a string.\r\n</p>\r\n<p>\r\nExample Input: <kbd>match(\"Apple\")</kbd>\r\n</p>`,\r\n\r\noutputFormat =\r\n`<p>\r\nThe output is also a string, except when all the conditions fail. In that casem return <kbd>false</kbd>.\r\n</p>\r\n<p>\r\nExample Output: <kbd>Pie!</kbd>\r\n</p>`,\r\n\r\nhint = \r\n`<p>\r\nEvery condition must contain a corresponding <kbd>return</kbd> statement (instructed in description). \r\nDo also note that strings have to be encased in quotes <kbd>'</kbd> or double quotes <kbd>\"</kbd>. \r\n</p>\r\n<p>\r\nExample: <kbd>return \"Foo\"</kbd>\r\n</p>`,\r\n\r\ndefaultCode = \r\n`function match(food) {\r\n  // The conditions have already been given to you\r\n  // Just fill in the required return statements\r\n  if(food == \"Apple\") {\r\n    \r\n  } else if(food == \"Orange\") {\r\n\r\n  } else {\r\n\r\n  }\r\n}`,\r\n\r\ndefaultInput = \r\n`match(\"Apple\")`,\r\n\r\ntestInputs = [[\"Apple\"], [\"Orange\"], null],\r\n\r\ninputFunction = `match`,\r\n\r\nsolution = (food) => {\r\n  if(food == \"Apple\") {\r\n    return \"Pie!\"\r\n  } else if(food == \"Orange\") {\r\n    return \"Juice!\"\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nimport random from \"random\"\r\n\r\nexport default {\r\n  components: {\r\n    Level\r\n  },\r\n\r\n  data: () => ({\r\n    properties: {\r\n      name,\r\n      title,\r\n      tags,\r\n      difficulty,\r\n\r\n      description,\r\n      inputFormat,\r\n      outputFormat,\r\n      hint,\r\n\r\n      defaultCode, \r\n      defaultInput,\r\n\r\n      testInputs,\r\n      inputFunction,\r\n      solution\r\n    }\r\n  }),\r\n\r\n  mounted () {\r\n    this.properties.testInputs[2] = [random.int(-100, 100)]\r\n  }\r\n}\r\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./c_02.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./c_02.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./c_02.vue?vue&type=template&id=58acf157&\"\nimport script from \"./c_02.vue?vue&type=script&lang=js&\"\nexport * from \"./c_02.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}