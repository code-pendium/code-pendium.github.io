{"version":3,"sources":["webpack:///./src/views/levels/c_03.vue?ca16","webpack:///src/views/levels/c_03.vue","webpack:///./src/views/levels/c_03.vue?2931","webpack:///./src/views/levels/c_03.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","_b","properties","staticRenderFns","title","tags","difficulty","description","inputFormat","outputFormat","hint","defaultCode","defaultInput","testInputs","inputFunction","solution","rnd","components","Level","data","mounted","operations","op","i","a","b","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,QAAQJ,EAAIM,GAAG,GAAG,QAAQN,EAAIO,YAAW,KACxIC,EAAkB,G,iCCQtB,SACAC,EAAQ,mBACRC,EAAO,CAAC,QAAS,aAAc,cAC/BC,EAAa,EAEbC,EAAc,4UAQdC,EAAA,4ZAWAC,EAAA,mGAQAC,EAAA,mOAYAC,EAAc,uDAKdC,EAAe,qBAGfC,EAAa,CAAC,KAAM,KAAM,KAAM,MAEhCC,EAAgB,QAEhBC,EAAW,SAAX,OACE,MAAF,SACA,IACA,cACA,IACA,cACA,IACA,YACA,SADE,GAMF,SAASC,IACP,OAAO,EAAT,gBAGA,OACEC,WAAY,CACVC,MAAJ,QAGEC,KAAM,WAAR,OACA,YACA,OACA,QACA,OACA,aAEA,cACA,cACA,eACA,OAEA,cACA,eAEA,aACA,gBACA,cAIEC,QA1BF,WA2BI,IAAIC,EAAa,CAAC,MAAO,WAAY,WAAY,UACjD,IAAJ,YACM,IAAIC,EAAKD,EAAWE,GAChBC,EAAIR,IAAd,MACMpB,KAAKM,WAAWW,WAAWU,GAAK,CAACC,EAAGC,EAAGH,MCjH8W,I,YCOvZI,EAAY,eACd,EACAhC,EACAS,GACA,EACA,KACA,KACA,MAIa,aAAAuB,E","file":"js/chunk-2d217b18.0c571564.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('Level',_vm._b({},'Level',_vm.properties,false))}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <Level\r\n  v-bind=\"properties\"\r\n  ></Level>\r\n</template>\r\n\r\n<script>\r\nimport Level from \"@/components/Level\"\r\n\r\nconst name = \"C-03\",\r\ntitle = \"Basic Calculator\",\r\ntags = [\"Basic\", \"Arithmetic\", \"Calculator\"],\r\ndifficulty = 3,\r\n\r\ndescription = \r\n`<p>\r\nNow to combine the two things that you've learned so far! \r\nIn this problem you will be making a simple function that does basic arithmetic between two numerical inputs. \r\nThe function must return a number by doing an operation between the two inputs. \r\nThe operation is based on the given type specified by the input.\r\n</p>`,\r\n\r\ninputFormat =\r\n`<p>\r\nThe input function <kbd>solve()</kbd> takes 3 arguments: <kbd>a</kbd>, <kbd>b</kbd>, and <kbd>type</kbd>. \r\nThe arguments <kbd>a</kbd> and <kbd>b</kbd> are both numbers. \r\nThe argument <kbd>type</kbd> is a string. \r\nThe 4 possible values for this argument are <kbd>add</kbd>, <kbd>subtract</kbd>, <kbd>multiply</kbd>, and <kbd>divide</kbd>.\r\n</p>\r\n<p>\r\nExample Input: <kbd>solve(1, 2, \"add\");</kbd>\r\n</p>`,\r\n\r\noutputFormat =\r\n`<p>\r\nThe output of the function must be a number.\r\n</p>\r\n<p>\r\nExample Output: <kbd>3</kbd>\r\n</p>`,\r\n\r\nhint =\r\n`<p>\r\nSince there are <b>4 possible values</b> for the argument <kbd>type</kbd>, there should also be 4 different conditions for each one.\r\n</p>\r\n<p>\r\nExample:\r\n<br>\r\n<kbd>if(type == \"add\") { \r\n   return a + b\r\n }</kbd>\r\n</p>`,\r\n\r\ndefaultCode = \r\n`function solve(a, b, type) {\r\n  // Your code here\r\n}`,\r\n\r\ndefaultInput = \r\n`solve(1, 2, \"add\")`,\r\n\r\ntestInputs = [null, null, null, null],\r\n\r\ninputFunction = `solve`,\r\n\r\nsolution = (a, b, type) => {\r\n  if(type == \"add\") \r\n    return a + b\r\n  if(type == \"subtract\") \r\n    return a - b\r\n  if(type == \"multiply\") \r\n    return a * b\r\n  if(type == \"divide\") \r\n    return a / b\r\n}\r\n\r\nimport random from \"random\"\r\n\r\nfunction rnd() {\r\n  return random.int(-100, 100)\r\n}\r\n\r\nexport default {\r\n  components: {\r\n    Level\r\n  },\r\n\r\n  data: () => ({\r\n    properties: {\r\n      name,\r\n      title,\r\n      tags,\r\n      difficulty,\r\n\r\n      description,\r\n      inputFormat,\r\n      outputFormat,\r\n      hint,\r\n\r\n      defaultCode, \r\n      defaultInput,\r\n\r\n      testInputs,\r\n      inputFunction,\r\n      solution\r\n    }\r\n  }),\r\n\r\n  mounted () {\r\n    var operations = [\"add\", \"subtract\", \"multiply\", \"divide\"]\r\n    for(var i in operations) {\r\n      var op = operations[i]\r\n      var a = rnd(), b = rnd()\r\n      this.properties.testInputs[i] = [a, b, op]\r\n    }\r\n  }\r\n}\r\n</script>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./c_03.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./c_03.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./c_03.vue?vue&type=template&id=0d010c2d&\"\nimport script from \"./c_03.vue?vue&type=script&lang=js&\"\nexport * from \"./c_03.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}