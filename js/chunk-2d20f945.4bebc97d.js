(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d20f945"],{b3db:function(t,e,n){"use strict";n.r(e);var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("Level",t._b({},"Level",t.properties,!1))},i=[],s=n("28fe"),u=n("61b2"),a=n.n(u),l="C-00",r="Introduction",h=[],p=1,d="<p>\nWelcome to Codependium! This level aims to walk you through the basics of Codependium's level system, structure, and workflow. \nIn general, each level revolves around a problem that requires some code to be executed using a set of inputs. \nTo finish a level, you must submit a program to fulfill the needs of the problem given. This is done by writing code. \nBefore submitting, you may choose to test your code by running it with the level's default testing input, or by setting your own one. \nOnce you are satisfied with the results of your code, you may choose to submit it. \nSubmitting will take your code and test it against multiple different test inputs. \nIf your code passes all these tests, you complete the level!\nEvery level grants you a certain amount of stars <b>★</b> after completion, which is based on the level's difficulty. \nThese stars may range from <b>1★</b> being the lowest and easiest to <b>10★</b> being the highest and most difficult.\n</p>\n<p>\nAnother thing to take note of is the Input Format and Output Format sections. \nIt is important that you read these sections for each level very carefully. \nThe Input Format section focuses on the general syntax for the input of each problem. \nIt will describe the arguments necessary for the input function in detail, including constraints if there are any. \nAs mentioned earlier, you may write your own inputs to test out your code. You may do this in the Run Input section. \nA very important rule within this section is that <b>inputs are read line by line</b>. \nThis means that every new line will be treated as another input. Inputs that take up more than one line will not work.\n</p>\n<p>\nNow for the Output Format. It essentially explains the same things as the Input Format, but for the output instead. \nThis section details how and what exactly your code should return. \nIt is important to strictly follow the instructions stated in here, as it can affect your test results upon submission. \nThe Run Output section displays the output of your code, based on each input stated in the Run Input section. \nIf you have multiple inputs then this section will output for each corresponding line. \nBut do take note that some problems might have an output comprising of multiple lines. Consider this when having multiple inputs.\n</p>\n<p>\nAnd finally, after all of that, here are the instructions for finishing this level: \nYou will be making a basic function that simply just returns the input given. \nReturning an output is the very core of every function, and this is how every level will play out onwards.\n</p>",c='<p>\nThe input function <kbd>say()</kbd> takes only a single argument: <kbd>something</kbd>. This argument may be of any data type.\n</p>\n<p>\nExample Input: <kbd>say("Hello World")</kbd>\n</p>',m="<p>\nThe output of the function is simply the given input.\n</p>\n<p>\nExample Output: <kbd>Hello World</kbd>\n</p>",f="<p>\nErase the double slash <kbd>//</kbd> before <kbd>return something</kbd> to un-comment the statement.\n</p>",y='function say(something) {\n  // This is a comment, it will not be read by the compiler\n  // To finish this level, simply remove the double slash (//) on the next line\n  // return something\n  // The line above is a return statement\n  // It simply returns the argument "something", which is passed through the function\n}',b='say("Hello World");',g=[null,null,null],w="say",v=function(t){return t},k={components:{Level:s["a"]},data:function(){return{properties:{name:l,title:r,tags:h,difficulty:p,description:d,inputFormat:c,outputFormat:m,hint:f,defaultCode:y,defaultInput:b,testInputs:g,inputFunction:w,solution:v}}},mounted:function(){for(var t=0;t<this.properties.testInputs.length;t++)this.properties.testInputs[t]=[a.a.int(-100,100)]}},I=k,T=n("2877"),x=Object(T["a"])(I,o,i,!1,null,null,null);e["default"]=x.exports}}]);
//# sourceMappingURL=chunk-2d20f945.4bebc97d.js.map